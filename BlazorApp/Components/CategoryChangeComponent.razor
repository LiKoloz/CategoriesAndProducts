@using BlazorApp.Services;
@using BlazorApp.Components.Dialogs.CategoriesDialogs;
@using BlazorApp.Services;
@inject HttpClient httpClient
@inject CategoryService categoryService
@inject AddNewCategoryDialogService addNewCategoryDialogService
@inject DeleteCategoryService deleteCategoryService
@inject IDialogService DialogService

<MudButton Variant="Variant.Filled" @onclick="()=> addNewCategoryDialog() " Style="margin: 2%;">Добавить  категорию</MudButton>


<MudText Typo="Typo.h4">Изменить категорию</MudText>
<div>
    <MudText Typo="Typo.h5">Выберите категорию</MudText>
    <select @bind="ChangeCategoryId" style="width: 50%;" Class="border-solid border-2 mud-border-primary rounded">
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Title - @category.Id"</option>
            @RenderChildCategories(category)
        }
    </select>
</div>
<div style="margin-top:2%;" >
    <h5 style="display: inline-block;">Новое название</h5>
    <input Class="border-solid border-2 mud-border-primary rounded" @bind-value="NewNameChangeCategory" style="display: inline-block; width: 200px; " />

    <h5 style="display: inline-block; ">Новый родитель</h5>
    <select @bind="NewFatherId" style="display: inline-block; width: 200px;" Class="border-solid border-2 mud-border-primary rounded">
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Title - @category.Id"</option>
            @RenderChildCategories(category)
        }
        <option value="-1">Корень</option>
    </select>
</div>

<MudButton Variant="Variant.Filled" @onclick="()=>changeCategory() " style="margin-top: 10px;">Изменить</MudButton>


@if (isDeleteWindow)
{
    <div id="zatemnenie">
        <div id="okno">
            Вы точно хотите удалить категорию с  id - @deleteDacegoryId<br>
            <div>
                <button href="#" class="close" @onclick="() => isTruDelete()">Удалить</button>
                <button href="#" class="close" @onclick="() => isFalseDelete()">Отмена</button>
            </div>
        </div>
    </div>
}


<MudText Typo="Typo.h4">Удалить</MudText>
<div>
    <select @bind="deleteDacegoryId" Class="border-solid border-2 mud-border-primary rounded" style="width: 50%">

        <option></option>
        @foreach (var category in Categories)
        {

            <option value="@category.Id">@category.Title - @category.Id"</option>
            @RenderChildCategories(category)
        }
    </select>
    <MudButton @onclick="OpenDeleteDialog" Variant="Variant.Filled" Color="Color.Primary" style="margin-top: 1%;">
        Удалить
    </MudButton>
</div>




@code {
    bool isDelete;
    private void OpenDeleteDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<DeleteCategoryDialog>("Simple Dialog", options);
    }

    async void DeleteCategoryEvent()
    {
        isDelete = deleteCategoryService.GetData();
        if (isDelete) deleteCategory();   
    }

    async void AddCategoryEvent()
    {
        nameNewCategory = addNewCategoryDialogService.GetNewName();
        NewPatherId = addNewCategoryDialogService.GetNewPatherId();
        StateHasChanged();
    }


    bool isDeleteWindow = false;
    void isFalseDelete()
    {
        isDeleteWindow = false;
    }
    async Task deleteCategory()
    {
        isDeleteWindow = true;
    }

    async void isTruDelete()
    {
        DeleteCategoryAndChildren(deleteDacegoryId, Categories);

        void DeleteCategoryAndChildren(int categoryId, List<Category> categories1)
        {
            var categoryToRemove = categories1.FirstOrDefault(c => c.Id == categoryId);
            if (categoryToRemove != null)
            {
                foreach (var child in categoryToRemove.Children)
                {
                    DeleteCategoryAndChildren(child.Id, categories1);
                }

                categories1.Remove(categoryToRemove);
            }
        }
        isDeleteWindow = false;
        categoryService.SetData(Categories);
        categoryService.TriggerEvent();
        //  await httpClient.DeleteAsync($"/api/delete/category/{deleteDacegoryId}");
    }


    private RenderFragment RenderChildCategories(Category parentCategory)
    {
        if (parentCategory.Children != null && parentCategory.Children.Any())
        {
            return builder =>
            {
                foreach (var childCategory in parentCategory.Children)
                {
                    builder.OpenElement(0, "option");
                    builder.AddAttribute(1, "value", childCategory.Id);
                    builder.AddContent(2, $"- {childCategory.Title} - {childCategory.Id}");
                    builder.CloseElement();
                    builder.AddContent(3, RenderChildCategories(childCategory));
                }
            };
        }

        return null;
    }


    string nameNewCategory = "";
    int? NewPatherId;
    int deleteDacegoryId;
    int ChangeCategoryId;
    int NewFatherId;
    string NewNameChangeCategory = String.Empty;


    async Task changeCategory()
    {
        foreach (var category in Categories)
        {
            Category? result = getById(category, ChangeCategoryId);
            if (result != null)
            {
                if (NewNameChangeCategory != String.Empty)
                {
                    result.Title = NewNameChangeCategory;
                }

                if (Categories.Contains(result) && result.Id != NewFatherId && NewFatherId > -1)
                {
                    foreach (var category2 in Categories)
                    {

                        var newFather = getById(category2, NewFatherId);


                        if (newFather != null)
                        {
                            Categories.Remove(result);
                            newFather.Children.Add(result);
                            result.ParentId = newFather.Id;
                            categoryService.SetData(Categories);
                            categoryService.TriggerEvent();
                            //   await httpClient.PutAsJsonAsync("/api/put/category", result);
                            break;
                        }

                    }
                    Categories.Remove(result);
                    break;
                }
                if (result.ParentId != NewFatherId && result.Id != NewFatherId && NewFatherId > -1)
                {
                    Category? father = null;
                    Category? newFather = null;
                    foreach (var category2 in Categories)
                    {

                        father = getById(category2, result.ParentId);
                        newFather = getById(category2, NewFatherId);
                        if (father != null)
                        {
                            father.Children.Remove(result);
                        }

                        if (newFather != null)
                        {
                            newFather.Children.Add(result);
                            result.ParentId = newFather.Id;
                            categoryService.SetData(Categories);
                            categoryService.TriggerEvent();
                            //   await httpClient.PutAsJsonAsync("/api/put/category", result);
                            break;
                        }
                    }
                    Categories.Remove(result);
                    break;
                }
                if (NewFatherId == -1)
                {
                    Categories.Add(result);
                    result.ParentId = null;
                    foreach (var category2 in Categories)
                    {
                        var father = getById(category2, result.ParentId);
                        if (father != null)
                        {
                            father.Children.Remove(result);
                        }
                    }
                    categoryService.SetData(Categories);
                    categoryService.TriggerEvent();
                    //  await httpClient.PutAsJsonAsync("/api/put/category", result);
                    break;
                }


            }
        }


    }

    async Task addNewCategory()
    {
        if (NewPatherId == -1)
        {
            var maxId = -1;
            foreach (var category2 in Categories)
            {
                maxId = findMaxId(category2, maxId);
            }
            var NewCategory = new Category { Id = maxId + 1, Title = nameNewCategory, ParentId = null, Children = new List<Category>() };
            Categories.Add(new Category { Id = maxId + 1, Title = nameNewCategory, ParentId = null, Children = new List<Category>() });
            categoryService.SetData(Categories);
            categoryService.TriggerEvent();
            //   await httpClient.PostAsJsonAsync("api/post/category", NewCategory);

        }
        else
        {
            foreach (var category in Categories)
            {
                var result = getById(category, NewPatherId);
                if (result != null)
                {
                    var maxId = -1;
                    foreach (var category2 in Categories)
                    {
                        maxId = findMaxId(category2, maxId);
                    }

                    var NewCategory = new Category { Id = maxId + 1, Title = nameNewCategory, ParentId = NewPatherId, Children = new List<Category>() };
                    result.Children.Add(NewCategory);
                    categoryService.SetData(Categories);
                    categoryService.TriggerEvent();
                    //  await httpClient.PostAsJsonAsync("api/post/category", NewCategory);
                    break;
                }
            }
        }
    }

    async Task addNewCategoryDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show <AddNewCategoryDialog > ("Simple Dialog", options);
        addNewCategory();
    }

    public int findMaxId(Category category, int maxId)
    {
        int maxFuncId = category.Id;

        List<int> ids = category.Children.Select(child => findMaxId(child, maxId)).ToList();

        ids.Add(maxId);

        return ids.Max();
    }

    public Category? getById(Category category, int? id)
    {
        if (category.Id == id)
        {
            return category;
        }

        foreach (var child in category.Children)
        {
            var result = getById(child, id);
            if (result != null)
            {
                return result;
            }
        }

        return null;
    }


    protected override async Task OnInitializedAsync() => await LoadData();

    async Task LoadData()
    {
        addNewCategoryDialogService.ChangeEvent += AddCategoryEvent;
        deleteCategoryService.MyEvent += DeleteCategoryEvent;
        // Categories = await httpClient.GetFromJsonAsync<List<Category>>("/api/categories");

    }
    protected override void OnParametersSet()
    {
        Categories.RemoveAll(c => c.ParentId.HasValue);
    }


    List<Category> Categories = new List<Category>()
    { };
    }

