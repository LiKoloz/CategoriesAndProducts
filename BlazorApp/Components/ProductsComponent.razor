@using BlazorApp.Services;
@inject DataService dataService
@inject HttpClient httpClient

<h3>@category.Title</h3>


<table class="table">
    <thead >
        <tr>
            <th scope="col" @onclick="()=> products.Sort((Product a, Product b)=> String.Compare(a.Title, b.Title))">Название</th>
            <th scope="col" @onclick="()=> CountSort() ">Количество</th>
            <th scope="col" @onclick="()=>PriceSort()">Цена</th>
            <th scope="col">Удалить</th>
            <th scope="col">Изменить</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in filteredProducts)
        {
        <tr>
                <td>@product.Title</td>
                <td>@product.Count</td>
                <td>@product.Price</td>
                <td @onclick="()=> tryDelete(product)"><input type="checkbox" /></td>
                <td @onclick="()=> changeProduct(product)"><input type="checkbox" /></td>
        </tr>
        }
    </tbody>
</table>

<h4>
    Поиск
</h4>
<div class="search">
    <input type="text" placeholder="Поиск" @bind="searchTerm" class="form-control mb-3" />
</div>





@if (isChanged)
{
    <div id="zatemnenie">
        <div id="okno">
        Изменить 
    <table class="table">
        <tbody>
            <tr>
                <td><input @bind-value="@changedProduct.Title"></input ></td>
                <td><input @bind-value="@changedProduct.Count"></input ></td>
                <td><input @bind-value="@changedProduct.Price"></input ></td>
            </tr>
        </tbody>
    </table>
    <button @onclick="()=> closeChangeProduct()">Закрыть</button>
        </div>
    </div>
}


@if (isAdd)
{
    <div id="zatemnenie">
        <div id="okno">
    Добавить
<table class="table">
   
    <tbody>
        <tr>
                <td><input @bind-value="@AddProduct.Title"></input ></td>
                <td><input @bind-value="@AddProduct.Count"></input ></td>
                <td><input @bind-value="@AddProduct.Price"></input ></td>
        </tr>
    </tbody>
</table>
    <button @onclick="()=> addNewProduct()">Добавить</button>
    <button @onclick="()=> isAdd = false">Закрыть</button>
        </div>
    </div>
}
@if (!isAdd)
{
    <div style="margin-top: 15px;">
        <button @onclick="()=> isAdd = true" style="margin-top: 10px;">Добавить товар</button>
    </div>
   
}


@if (isDeleteWindow)
{
    <div id="zatemnenie">
        <div id="okno">
            Вы точно хотите удалить @deletingProduct.Title<br>
            <div>
                <button href="#" class="close" @onclick="() => isTruDelete()">Удалить</button>
                <button href="#" class="close" @onclick="() => isFalseDelete()">Отмена</button>
            </div>
        </div>
    </div>
}


@code {
    private string searchTerm;


    void CountSort()
    {
        var c = products.OrderBy(p => p.Count).ToList();
        products = c;
    }

    void PriceSort()
    {
        var c = products.OrderBy(p => p.Price).ToList();
        products = c;
    }
    bool isChanged = false;
    bool isAdd = false;
    bool isDeleteWindow = false;
    bool isDelete = false;

    Product deletingProduct = new();


    Product changedProduct = new();
    Product AddProduct = new();

    async void addNewProduct()
    {
        AddProduct.CategoryId = category.Id;
        Product a = (Product)AddProduct.Clone();
        products.Add(a);
        //await httpClient.PostAsJsonAsync<Product>($"api/post/product/{a.CategoryId}", a);
    }

    async void closeChangeProduct()
    {
        isChanged = false;
       // await httpClient.PutAsJsonAsync($"api/put/product", changedProduct);
    }

    void tryDelete(Product product)
    {
        deletingProduct = product;
        isDeleteWindow = true;
    }

    async void isTruDelete()
    {
      
        deleteProduct(deletingProduct);
        isDeleteWindow = false;
       // await httpClient.DeleteAsync($"api/delete/product/{deletingProduct.Id}");

    }

    void isFalseDelete()
    {
        isDeleteWindow = false;
    }
    void deleteProduct(Product product)
    {
        products.Remove(product);
    }

    async void changeProduct(Product product)
    {
        changedProduct = product;
        isChanged = true;
    }


    private List<Product> filteredProducts => products
    .Where(p => string.IsNullOrWhiteSpace(searchTerm)
    || p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
    .ToList();

    Category category = new Category();

    protected override void OnInitialized()
    {
        dataService.MyEvent += OnMyEvent;
    }
    async private void OnMyEvent()
    {
        category = dataService.GetData();
      //  products = await httpClient.GetFromJsonAsync<List<Product>>($"api/get/products/{category.Id}");
        StateHasChanged();
    }

    public void Dispose()
    {
        dataService.MyEvent -= OnMyEvent;
    }


    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private List<Product> products = new List<Product>
    { };
}
